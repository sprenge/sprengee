# -*- coding: utf-8 -*-

import json
from unittest import TestCase
from monolithe.specifications import Specification
from monolithe.config import MonolitheConfig

SPEC = """{
    "model": {
        "resource_name": "tasks",
        "description": "Represent a task to do in a list",
        "entity_name": "TheTask",
        "package": "todo-list",
        "get": true,
        "update": true,
        "delete": true,
        "rest_name": "task",
        "extends": [
            "@description",
            "@title"
        ]
    },
    "attributes": [
        {
            "name": "status",
            "min_length": 1,
            "exposed": true,
            "filterable": true,
            "unique_scope": "no",
            "allowed_choices": [
                "TODO",
                "DONE"
            ],
            "max_length": 2048,
            "orderable": true,
            "type": "enum",
            "description": "The status of the task",
            "subtype": "test"
        },
        {
            "name": "theTime",
            "allowed_chars": "123",
            "allowed_choices": null,
            "autogenerated": true,
            "channel": "rest",
            "creation_only": true,
            "default_order": true,
            "default_value": "123",
            "description": "the time",
            "exposed": false,
            "filterable": false,
            "format": null,
            "max_length": 1,
            "max_value": 2,
            "min_length": 3,
            "min_value": 4,
            "orderable": false,
            "read_only": true,
            "transient": true,
            "type": "time",
            "unique": true,
            "unique_scope": "global"
        }
    ],
    "children": [
        {
            "rest_name": "toto",
            "relationship": "child",
            "create": true,
            "get": true,
            "bulk_create": true,
            "bulk_update": true,
            "bulk_delete": true
        },
        {
            "rest_name": "user",
            "relationship": "member",
            "update": true,
            "get": true
        }
    ]
}
"""

class SpecificationTest(TestCase):
    """ Test for specifications

    """

    def _verify(self, s, data):
        """
        """
        self.assertEquals(s.rest_name, data['model']['rest_name'])
        self.assertEquals(s.description, data['model']['description'])
        self.assertEquals(s.entity_name, 'TheTask')
        self.assertEquals(s.entity_name_plural, 'TheTasks')
        self.assertEquals(s.package, data['model']['package'])
        self.assertEquals(s.instance_name, 'the_task')
        self.assertEquals(s.instance_name_plural, 'the_tasks')
        self.assertEquals(s.resource_name, data['model']['resource_name'])
        self.assertEquals(s.extends, data['model']['extends'])
        self.assertEquals(s.allows_get, data['model']['get'])
        self.assertEquals(s.allows_create, False)
        self.assertEquals(s.allows_update, data['model']['update'])
        self.assertEquals(s.allows_delete, data['model']['delete'])
        self.assertEquals(s.is_root, False)

        self.assertEquals(len(s.attributes), 2)
        self.assertEquals(s.attributes[1].allowed_chars, None)
        self.assertEquals(s.attributes[1].allowed_choices, ["TODO", "DONE"])
        self.assertEquals(s.attributes[1].autogenerated, False)
        self.assertEquals(s.attributes[1].channel, None)
        self.assertEquals(s.attributes[1].creation_only, False)
        self.assertEquals(s.attributes[1].default_order, False)
        self.assertEquals(s.attributes[1].default_value, None)
        self.assertEquals(s.attributes[1].description, 'The status of the task')
        self.assertEquals(s.attributes[1].exposed, True)
        self.assertEquals(s.attributes[1].filterable, True)
        self.assertEquals(s.attributes[1].format, 'free')
        self.assertEquals(s.attributes[1].local_type, 'str')
        self.assertEquals(s.attributes[1].max_length, 2048)
        self.assertEquals(s.attributes[1].max_value, None)
        self.assertEquals(s.attributes[1].min_length, 1)
        self.assertEquals(s.attributes[1].min_value, None)
        self.assertEquals(s.attributes[1].orderable, True)
        self.assertEquals(s.attributes[1].read_only, False)
        self.assertEquals(s.attributes[1].name, 'status')
        self.assertEquals(s.attributes[1].transient, False)
        self.assertEquals(s.attributes[1].type, 'enum')
        self.assertEquals(s.attributes[1].unique, False)
        self.assertEquals(s.attributes[1].unique_scope, 'no')
        self.assertEquals(s.attributes[1].subtype, 'test')

        self.assertEquals(s.attributes[0].allowed_chars, '123')
        self.assertEquals(s.attributes[0].allowed_choices, None)
        self.assertEquals(s.attributes[0].autogenerated, True)
        self.assertEquals(s.attributes[0].channel, 'rest')
        self.assertEquals(s.attributes[0].creation_only, True)
        self.assertEquals(s.attributes[0].default_order, True)
        self.assertEquals(s.attributes[0].default_value, '123')
        self.assertEquals(s.attributes[0].description, 'the time')
        self.assertEquals(s.attributes[0].exposed, False)
        self.assertEquals(s.attributes[0].filterable, False)
        self.assertEquals(s.attributes[0].format, None)
        self.assertEquals(s.attributes[0].local_type, 'float')
        self.assertEquals(s.attributes[0].max_length, 1)
        self.assertEquals(s.attributes[0].max_value, 2)
        self.assertEquals(s.attributes[0].min_length, 3)
        self.assertEquals(s.attributes[0].min_value, 4)
        self.assertEquals(s.attributes[0].orderable, False)
        self.assertEquals(s.attributes[0].read_only, True)
        self.assertEquals(s.attributes[0].name, 'theTime')
        self.assertEquals(s.attributes[0].local_name, 'the_time')
        self.assertEquals(s.attributes[0].transient, True)
        self.assertEquals(s.attributes[0].type, 'time')
        self.assertEquals(s.attributes[0].unique, True)
        self.assertEquals(s.attributes[0].unique_scope, 'global')
        self.assertEquals(s.attributes[0].subtype, None)

        self.assertEquals(len(s.child_apis), 2)
        self.assertEquals(s.child_apis[0].rest_name, 'toto')
        self.assertEquals(s.child_apis[0].relationship, 'child')
        self.assertEquals(s.child_apis[0].allows_create, True)
        self.assertEquals(s.child_apis[0].allows_update, False)
        self.assertEquals(s.child_apis[0].allows_delete, False)
        self.assertEquals(s.child_apis[0].allows_get, True)
        self.assertEquals(s.child_apis[0].allows_bulk_create, True)
        self.assertEquals(s.child_apis[0].allows_bulk_update, True)
        self.assertEquals(s.child_apis[0].allows_bulk_delete, True)

        self.assertEquals(s.child_apis[1].rest_name, 'user')
        self.assertEquals(s.child_apis[1].relationship, 'member')
        self.assertEquals(s.child_apis[1].allows_create, False)
        self.assertEquals(s.child_apis[1].allows_update, True)
        self.assertEquals(s.child_apis[1].allows_delete, False)
        self.assertEquals(s.child_apis[1].allows_get, True)
        self.assertEquals(s.child_apis[1].allows_bulk_create, False)
        self.assertEquals(s.child_apis[1].allows_bulk_update, False)
        self.assertEquals(s.child_apis[1].allows_bulk_delete, False)

    def test_specification_from_dict(self):
        """ Convert REST names to Python

        """
        data = json.loads(SPEC)
        monolithe_config = MonolitheConfig()
        s = Specification(filename="task.spec", monolithe_config=monolithe_config)
        s.from_dict(data)
        self._verify(s, data)


    def test_specification_to_dict(self):
        """
        """
        data = json.loads(SPEC)
        monolithe_config = MonolitheConfig()
        s = Specification(filename="task.spec", monolithe_config=monolithe_config)
        s.from_dict(data)
        data = s.to_dict()
        self._verify(s, data)
